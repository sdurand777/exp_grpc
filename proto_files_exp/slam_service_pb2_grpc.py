# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import pointcloud_pb2 as pointcloud__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in slam_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SlamServiceStub(object):
    """deux services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPointCloud = channel.unary_stream(
                '/IVM.slam.SlamService/GetPointCloud',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=pointcloud__pb2.PointCloud.FromString,
                _registered_method=True)
        self.ConnectPointCloud = channel.stream_unary(
                '/IVM.slam.SlamService/ConnectPointCloud',
                request_serializer=pointcloud__pb2.PointCloud.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetPointCloudWithPose = channel.unary_stream(
                '/IVM.slam.SlamService/GetPointCloudWithPose',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=pointcloud__pb2.PointCloudWithPose.FromString,
                _registered_method=True)
        self.ConnectPointCloudWithPose = channel.stream_unary(
                '/IVM.slam.SlamService/ConnectPointCloudWithPose',
                request_serializer=pointcloud__pb2.PointCloudWithPose.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.GetSlamData = channel.unary_stream(
                '/IVM.slam.SlamService/GetSlamData',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=pointcloud__pb2.SlamData.FromString,
                _registered_method=True)
        self.ConnectSlamData = channel.stream_unary(
                '/IVM.slam.SlamService/ConnectSlamData',
                request_serializer=pointcloud__pb2.SlamData.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class SlamServiceServicer(object):
    """deux services
    """

    def GetPointCloud(self, request, context):
        """services de bases uniquements pour les coords points
        service pour recuperer les points du serveur
        Utilisation correcte
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectPointCloud(self, request_iterator, context):
        """service pour envoyer les points au serveur
        Utilisation correcte
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPointCloudWithPose(self, request, context):
        """services points et poses
        Service pour récupérer les points et la pose du serveur
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectPointCloudWithPose(self, request_iterator, context):
        """Service pour envoyer les points et la pose au serveur
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSlamData(self, request, context):
        """services data slam liste de points et liste de pose et index
        Service pour récupérer les points et la pose du serveur
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectSlamData(self, request_iterator, context):
        """Service pour envoyer les points et la pose au serveur
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SlamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPointCloud': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPointCloud,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=pointcloud__pb2.PointCloud.SerializeToString,
            ),
            'ConnectPointCloud': grpc.stream_unary_rpc_method_handler(
                    servicer.ConnectPointCloud,
                    request_deserializer=pointcloud__pb2.PointCloud.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetPointCloudWithPose': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPointCloudWithPose,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=pointcloud__pb2.PointCloudWithPose.SerializeToString,
            ),
            'ConnectPointCloudWithPose': grpc.stream_unary_rpc_method_handler(
                    servicer.ConnectPointCloudWithPose,
                    request_deserializer=pointcloud__pb2.PointCloudWithPose.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetSlamData': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSlamData,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=pointcloud__pb2.SlamData.SerializeToString,
            ),
            'ConnectSlamData': grpc.stream_unary_rpc_method_handler(
                    servicer.ConnectSlamData,
                    request_deserializer=pointcloud__pb2.SlamData.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'IVM.slam.SlamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('IVM.slam.SlamService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SlamService(object):
    """deux services
    """

    @staticmethod
    def GetPointCloud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/IVM.slam.SlamService/GetPointCloud',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            pointcloud__pb2.PointCloud.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectPointCloud(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/IVM.slam.SlamService/ConnectPointCloud',
            pointcloud__pb2.PointCloud.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPointCloudWithPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/IVM.slam.SlamService/GetPointCloudWithPose',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            pointcloud__pb2.PointCloudWithPose.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectPointCloudWithPose(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/IVM.slam.SlamService/ConnectPointCloudWithPose',
            pointcloud__pb2.PointCloudWithPose.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSlamData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/IVM.slam.SlamService/GetSlamData',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            pointcloud__pb2.SlamData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectSlamData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/IVM.slam.SlamService/ConnectSlamData',
            pointcloud__pb2.SlamData.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
